import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
client = gspread.authorize(creds)
sheet = client.open("–°–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç")
transactions_ws = sheet.worksheet("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
limits_ws = sheet.worksheet("–õ–∏–º–∏—Ç—ã")

user_state = {}

def get_russian_month():
    month_name = datetime.today().strftime("%B")
    months_ru = {
        "January": "–Ø–Ω–≤–∞—Ä—å", "February": "–§–µ–≤—Ä–∞–ª—å", "March": "–ú–∞—Ä—Ç",
        "April": "–ê–ø—Ä–µ–ª—å", "May": "–ú–∞–π", "June": "–ò—é–Ω—å",
        "July": "–ò—é–ª—å", "August": "–ê–≤–≥—É—Å—Ç", "September": "–°–µ–Ω—Ç—è–±—Ä—å",
        "October": "–û–∫—Ç—è–±—Ä—å", "November": "–ù–æ—è–±—Ä—å", "December": "–î–µ–∫–∞–±—Ä—å"
    }
    return months_ru.get(month_name, month_name)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        KeyboardButton("‚ûï –†–∞—Å—Ö–æ–¥"),
        KeyboardButton("üí∞ –î–æ—Ö–æ–¥"),
        KeyboardButton("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"),
        KeyboardButton("üìä –û—Å—Ç–∞—Ç–∫–∏ –ø–æ –ª–∏–º–∏—Ç–∞–º")
    )
    markup.add(KeyboardButton("üö™ –í—ã—Ö–æ–¥"))
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=markup)

@dp.message_handler(lambda message: message.text == "üîÑ –°—Ç–∞—Ä—Ç")
async def handle_restart_button(message: types.Message):
    await start(message)

@dp.message_handler(lambda message: message.text == "üö™ –í—ã—Ö–æ–¥")
async def handle_exit(message: types.Message):
    user_state.pop(message.from_user.id, None)
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üîÑ –°—Ç–∞—Ä—Ç"))
    await message.answer(
        "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞. –ù–∞–∂–º–∏—Ç–µ ¬´üîÑ –°—Ç–∞—Ä—Ç¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=markup
    )

@dp.message_handler(lambda message: message.text == "‚Ü© –ù–∞–∑–∞–¥")
async def handle_back(message: types.Message):
    user_state.pop(message.from_user.id, None)
    await start(message)

@dp.message_handler(lambda message: message.text == "üìä –û—Å—Ç–∞—Ç–∫–∏ –ø–æ –ª–∏–º–∏—Ç–∞–º")
async def handle_limits_summary(message: types.Message):
    month = datetime.today().strftime("%Y-%m")
    limits = limits_ws.get_all_records()
    transactions = transactions_ws.get_all_records()

    response_lines = ["üìä –û—Å—Ç–∞—Ç–∫–∏ –ø–æ –ª–∏–º–∏—Ç–∞–º:"]

    for limit in limits:
        if limit.get("–ú–µ—Å—è—Ü") != month:
            continue
        category = limit.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
        max_amount = float(limit.get("–õ–∏–º–∏—Ç (‚Ç∏)", 0))
        spent = sum(
            float(r.get("–°—É–º–º–∞", 0))
            for r in transactions
            if r.get("–¢–∏–ø") == "–†–∞—Å—Ö–æ–¥" and r.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è") == category and r.get("–î–∞—Ç–∞", "").startswith(month)
        )
        remaining = max_amount - spent
        response_lines.append(f"{category}: –ø–æ—Ç—Ä–∞—á–µ–Ω–æ {spent:.0f} ‚Ç∏, –æ—Å—Ç–∞–ª–æ—Å—å {remaining:.0f} ‚Ç∏ –∏–∑ {max_amount:.0f} ‚Ç∏")

    await message.answer("\n".join(response_lines))

@dp.message_handler(lambda message: message.text == "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def handle_categories_button(message: types.Message):
    await show_categories(message)

@dp.message_handler(commands=['–∫–∞—Ç–µ–≥–æ—Ä–∏–∏'])
async def show_categories(message: types.Message):
    user_state[message.from_user.id] = {"stage": "–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"}
    month = datetime.today().strftime("%Y-%m")
    limits = limits_ws.get_all_records()

    lines = ["üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ª–∏–º–∏—Ç—ã –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:"]
    for item in limits:
        if item['–ú–µ—Å—è—Ü'] == month:
            lines.append(f"- {item['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}: {item['–õ–∏–º–∏—Ç (‚Ç∏)']} ‚Ç∏")

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é/–ª–∏–º–∏—Ç"))
    markup.add(KeyboardButton("‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é/–ª–∏–º–∏—Ç"))
    markup.add(KeyboardButton("‚Ü© –ù–∞–∑–∞–¥"), KeyboardButton("üö™ –í—ã—Ö–æ–¥"))

    await message.answer("\n".join(lines), reply_markup=markup)

@dp.message_handler(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é/–ª–∏–º–∏—Ç")
async def handle_add_category(message: types.Message):
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.")

@dp.message_handler(lambda message: message.text == "‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é/–ª–∏–º–∏—Ç")
async def handle_edit_category(message: types.Message):
    await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.")

@dp.message_handler(lambda message: message.text in ["‚ûï –†–∞—Å—Ö–æ–¥", "üí∞ –î–æ—Ö–æ–¥"])
async def handle_type(message: types.Message):
    user_state[message.from_user.id] = {
        "type": "–†–∞—Å—Ö–æ–¥" if "–†–∞—Å—Ö–æ–¥" in message.text else "–î–æ—Ö–æ–¥"
    }

    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    if message.text == "‚ûï –†–∞—Å—Ö–æ–¥":
        limits = limits_ws.get_all_records()
        categories = sorted(list(set(l["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] for l in limits)))
        for cat in categories:
            markup.add(KeyboardButton(cat))
    else:  # –î–æ—Ö–æ–¥
        income_categories = ["–ó–∞—Ä–ø–ª–∞—Ç–∞", "–î–æ–ª–≥", "–ü–æ–¥–∞—Ä–æ–∫", "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ"]
        for cat in income_categories:
            markup.add(KeyboardButton(cat))

    markup.add(KeyboardButton("üö™ –í—ã—Ö–æ–¥"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

@dp.message_handler(lambda message: message.from_user.id in user_state and "category" not in user_state[message.from_user.id])
async def handle_category(message: types.Message):
    user_state[message.from_user.id]["category"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")

@dp.message_handler(lambda message: message.from_user.id in user_state and "amount" not in user_state[message.from_user.id])
async def handle_amount(message: types.Message):
    try:
        amount = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º.")
        return

    state = user_state.pop(message.from_user.id)
    operation_type = state["type"]
    category = state["category"]
    user = message.from_user.first_name
    today = datetime.today().strftime("%Y-%m-%d")
    month = datetime.today().strftime("%Y-%m")

    transactions_ws.append_row([today, operation_type, category, amount, user])

    limits = limits_ws.get_all_records()
    current_limit = next(
        (l for l in limits if l["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == category and l["–ú–µ—Å—è—Ü"] == month),
        None
    )

    if operation_type == "–†–∞—Å—Ö–æ–¥" and current_limit:
        rows = transactions_ws.get_all_records()
        spent = sum(
            float(r["–°—É–º–º–∞"])
            for r in rows
            if r["–¢–∏–ø"] == "–†–∞—Å—Ö–æ–¥" and r["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == category and r["–î–∞—Ç–∞"].startswith(month)
        )
        remaining = current_limit["–õ–∏–º–∏—Ç (‚Ç∏)"] - spent

        month_name_ru = get_russian_month()
        await message.answer(
            f"üìÖ {month_name_ru}:\n"
            f"–í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é \"{category}\" ‚Äî {spent:.0f} ‚Ç∏\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å ‚Äî {remaining:.0f} ‚Ç∏ –∏–∑ {current_limit['–õ–∏–º–∏—Ç (‚Ç∏)']} ‚Ç∏"
        )
    else:
        await message.answer("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ!")

    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    if operation_type == "–î–æ—Ö–æ–¥":
        categories = ["–ó–∞—Ä–ø–ª–∞—Ç–∞", "–î–æ–ª–≥", "–ü–æ–¥–∞—Ä–æ–∫", "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ"]
    else:
        limits = limits_ws.get_all_records()
        categories = sorted(list(set(l["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] for l in limits)))

    for cat in categories:
        markup.add(KeyboardButton(cat))
    markup.add(KeyboardButton("üö™ –í—ã—Ö–æ–¥"))
    user_state[message.from_user.id] = {"type": operation_type}

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ üö™ –í—ã—Ö–æ–¥:", reply_markup=markup)

if __name__ == '__main__':
    executor.start_polling(dp)