import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ Replit Secrets
TOKEN = os.getenv("TELEGRAM_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
client = gspread.authorize(creds)
sheet = client.open("–°–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç")
transactions_ws = sheet.worksheet("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
limits_ws = sheet.worksheet("–õ–∏–º–∏—Ç—ã")

user_state = {}

# –ú–µ—Å—è—Ü –ø–æ-—Ä—É—Å—Å–∫–∏
def get_russian_month():
    month_name = datetime.today().strftime("%B")
    months_ru = {
        "January": "–Ø–Ω–≤–∞—Ä—å", "February": "–§–µ–≤—Ä–∞–ª—å", "March": "–ú–∞—Ä—Ç",
        "April": "–ê–ø—Ä–µ–ª—å", "May": "–ú–∞–π", "June": "–ò—é–Ω—å",
        "July": "–ò—é–ª—å", "August": "–ê–≤–≥—É—Å—Ç", "September": "–°–µ–Ω—Ç—è–±—Ä—å",
        "October": "–û–∫—Ç—è–±—Ä—å", "November": "–ù–æ—è–±—Ä—å", "December": "–î–µ–∫–∞–±—Ä—å"
    }
    return months_ru.get(month_name, month_name)

# /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("‚ûï –†–∞—Å—Ö–æ–¥"), KeyboardButton("üí∞ –î–æ—Ö–æ–¥"))
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
@dp.message_handler(lambda message: message.text in ["‚ûï –†–∞—Å—Ö–æ–¥", "üí∞ –î–æ—Ö–æ–¥"])
async def handle_type(message: types.Message):
    user_state[message.from_user.id] = {
        "type": "–†–∞—Å—Ö–æ–¥" if "–†–∞—Å—Ö–æ–¥" in message.text else "–î–æ—Ö–æ–¥"
    }

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ª–∏–º–∏—Ç–æ–≤
    limits = limits_ws.get_all_records()
    categories = sorted(list(set(l["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] for l in limits)))

    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for cat in categories:
        markup.add(KeyboardButton(cat))
    markup.add(KeyboardButton("‚ûï –î—Ä—É–≥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚ûï –î—Ä—É–≥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è':", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(lambda message: message.from_user.id in user_state and "category" not in user_state[message.from_user.id])
async def handle_category(message: types.Message):
    if message.text == "‚ûï –î—Ä—É–≥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
    else:
        user_state[message.from_user.id]["category"] = message.text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã
@dp.message_handler(lambda message: message.from_user.id in user_state and "amount" not in user_state[message.from_user.id])
async def handle_amount(message: types.Message):
    try:
        amount = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º.")
        return

    data = user_state.pop(message.from_user.id)
    user = message.from_user.first_name
    today = datetime.today().strftime("%Y-%m-%d")
    month = datetime.today().strftime("%Y-%m")

    # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
    transactions_ws.append_row([today, data["type"], data["category"], amount, user])

    # –ò—â–µ–º –ª–∏–º–∏—Ç
    limits = limits_ws.get_all_records()
    current_limit = next(
        (l for l in limits if l["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == data["category"] and l["–ú–µ—Å—è—Ü"] == month),
        None
    )

    if data["type"] == "–†–∞—Å—Ö–æ–¥" and current_limit:
        rows = transactions_ws.get_all_records()
        spent = sum(
            float(r["–°—É–º–º–∞"])
            for r in rows
            if r["–¢–∏–ø"] == "–†–∞—Å—Ö–æ–¥" and r["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == data["category"] and r["–î–∞—Ç–∞"].startswith(month)
        )
        remaining = current_limit["–õ–∏–º–∏—Ç (‚Ç∏)"] - spent

        month_name_ru = get_russian_month()
        await message.answer(
            f"üìÖ {month_name_ru}:\n"
            f"–í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é \"{data['category']}\" ‚Äî {spent:.0f} ‚Ç∏\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å ‚Äî {remaining:.0f} ‚Ç∏ –∏–∑ {current_limit['–õ–∏–º–∏—Ç (‚Ç∏)']} ‚Ç∏"
        )
    else:
        await message.answer("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ!")

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    executor.start_polling(dp)
